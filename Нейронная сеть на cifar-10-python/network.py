import numpy as np # Импортируется библиотека NumPy.
import random # Импортируется библиотека Random.

class NeuralNetwork: # Определяется класс NeuralNetwork, реализующий простую нейронную сеть.
    def __init__(self, input_size, hidden_size1, hidden_size2, output_size): # Определяется конструктор класса, в котором инициализируются веса и смещения нейронной сети.
        self.W1 = np.random.randn(input_size, hidden_size1) # Инициализируются веса первого скрытого слоя случайными значениями.
        self.b1 = np.zeros((1, hidden_size1)) # Инициализируются смещения первого скрытого слоя нулевыми значениями.
        self.W2 = np.random.randn(hidden_size1, hidden_size2) # Инициализируются веса второго скрытого слоя случайными значениями.
        self.b2 = np.zeros((1, hidden_size2)) # Инициализируются смещения второго скрытого слоя нулевыми значениями.
        self.W3 = np.random.randn(hidden_size2, output_size) # Инициализируются веса выходного слоя случайными значениями.
        self.b3 = np.zeros((1, output_size)) # Инициализируются смещения выходного слоя нулевыми значениями.

    def forward(self, X): # Определяется метод forward(), который выполняет прямое распространение входных данных через нейронную сеть.
        self.z1 = np.dot(X, self.W1) + self.b1 # Вычисляются значения активации первого скрытого слоя.
        self.a1 = np.maximum(0, self.z1)   # Применяется функция активации ReLU к значениям первого скрытого слоя.
        self.z2 = np.dot(self.a1, self.W2) + self.b2 # Вычисляются значения активации второго скрытого слоя.
        self.a2 = np.maximum(0, self.z2)   # Применяется функция активации ReLU к значениям второго скрытого слоя.
        self.z3 = np.dot(self.a2, self.W3) + self.b3 # Вычисляются значения активации выходного слоя.
        self.a3 = np.exp(self.z3) / np.sum(np.exp(self.z3), axis=1, keepdims=True) # Применяется функция активации Softmax к значениям выходного слоя.
        return self.a3 # Возвращаются выходные значения нейронной сети.

    def backward(self, X, y, lr): # Определяется метод backward(), который выполняет обратное распространение ошибки и обновление весов сети.
        m = X.shape[0] # Вычисляется размер батча входных данных.
        delta3 = self.a3 - y # Вычисляется ошибка на выходном слое.
        self.dW3 = np.dot(self.a2.T, delta3) / m # Вычисляются градиенты весов выходного слоя.
        self.db3 = np.sum(delta3, axis=0, keepdims=True) / m # Вычисляются градиенты смещений выходного слоя.
        delta2 = np.dot(delta3, self.W3.T) * (self.a2 > 0) # Вычисляется ошибка на втором скрытом слое.
        self.dW2 = np.dot(self.a1.T, delta2) / m # Вычисляются градиенты весов второго скрытого слоя.
        self.db2 = np.sum(delta2, axis=0, keepdims=True) / m # Вычисляются градиенты смещений второго скрытого слоя.
        delta1 = np.dot(delta2, self.W2.T) * (self.a1 > 0) #  Вычисляется ошибка на первом скрытом слое.
        self.dW1 = np.dot(X.T, delta1) / m # Вычисляются градиенты весов первого скрытого слоя.
        self.db1 = np.sum(delta1, axis=0, keepdims=True) / m # Вычисляются градиенты смещений первого скрытого слоя.

        self.W3 -= lr * self.dW3 # Обновляются веса выходного слоя.
        self.b3 -= lr * self.db3 # Обновляются смещения выходного слоя.
        self.W2 -= lr * self.dW2 # Обновляются веса второго скрытого слоя.
        self.b2 -= lr * self.db2 # Обновляются смещения второго скрытого слоя.
        self.W1 -= lr * self.dW1 # Обновляются веса первого скрытого слоя.
        self.b1 -= lr * self.db1 # Обновляются смещения первого скрытого слоя.
